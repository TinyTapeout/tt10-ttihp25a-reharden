//-------------------------------------------------------------------------
// layer_e.v
//-------------------------------------------------------------------------
// This file is generated by PyMTL SystemVerilog translation pass.

// PyMTL Component LayerE Definition
// Full name: LayerE_noparam
// At /home/htamas/git/tt10-py-checkers/src/layer_e/layer_e.py

module layer_e
(
  output logic [5:0] above ,
  input  logic [5:0] below ,
  input  logic [0:0] clk ,
  input  logic [9:0] counter ,
  input  logic [9:0] pix_x ,
  input  logic [9:0] pix_y ,
  input  logic [0:0] reset ,
  input  logic [7:0] switches 
);
  logic [5:0] layer_color;
  logic [0:0] layer_sel;
  logic [9:0] layer_x;
  logic [9:0] layer_y;

  // PyMTL Update Block Source
  // At /home/htamas/git/tt10-py-checkers/src/layer_e/layer_e.py:19
  // @update
  // def comb_logic():
  //     s.layer_x @= s.pix_x + s.counter/2
  //     s.layer_y @= s.pix_y + s.counter/6
  //     s.layer_sel @= (s.layer_x[4] ^ s.layer_y[4]) & (s.pix_y[1] ^ s.pix_x[0])
  //     s.layer_color @= concat(s.switches[7], s.switches[5], s.switches[7], s.switches[4], s.switches[7], s.switches[3])
  //     if s.layer_sel:
  //         s.above @= s.layer_color
  //     else:
  //         s.above @= s.below
  
  always_comb begin : comb_logic
    layer_x = pix_x + ( counter / 10'd2 );
    layer_y = pix_y + ( counter / 10'd6 );
    layer_sel = ( layer_x[4'd4] ^ layer_y[4'd4] ) & ( pix_y[4'd1] ^ pix_x[4'd0] );
    layer_color = { switches[3'd7], switches[3'd5], switches[3'd7], switches[3'd4], switches[3'd7], switches[3'd3] };
    if ( layer_sel ) begin
      above = layer_color;
    end
    else
      above = below;
  end

endmodule
