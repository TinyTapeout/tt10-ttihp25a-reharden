//_\TLV_version 1d: tl-x.org, generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro
//_\source project.tlv 71

//_\SV


module uart_rx
    #(parameter int FREQUENCY = 20_000_000, parameter int BAUD_RATE = 9600)
    (
        input logic clk,
        input logic rx_serial,          // input serial data
        input logic reset,
        output logic rx_done,           // asserts when reception is done
        output logic [7:0] rx_byte      // received byte
    );

    localparam int CLKS_PER_BIT = FREQUENCY / BAUD_RATE;

    typedef enum logic [2:0] {
        s_IDLE          = 3'b000,
        s_RX_START_BIT  = 3'b001,
        s_RX_DATA_BITS  = 3'b010,
        s_RX_STOP_BIT   = 3'b011,
        s_CLEANUP       = 3'b100
    } state_t;

    state_t r_SM_Main = s_IDLE;

    logic r_Rx_Data_R = 1'b1;
    logic r_Rx_Data = 1'b1;

    int unsigned r_Clock_Count = 0;
    int unsigned r_Bit_Index = 0; // 8 bits total
    logic [7:0] r_Rx_Byte = 8'h00;
    logic r_Rx_DV = 1'b0;

    // Purpose: Double-register the incoming data to avoid metastability
    always_ff @(posedge clk) begin
        r_Rx_Data_R <= rx_serial;
        r_Rx_Data   <= r_Rx_Data_R;
    end

    // RX state machine
    always_ff @(posedge clk) begin
        if (reset) begin
            r_SM_Main      <= s_IDLE;
            r_Rx_DV        <= 1'b0;
            r_Clock_Count  <= 0;
            r_Bit_Index    <= 0;
            r_Rx_Byte      <= 8'h00;
        end

        else begin
            case (r_SM_Main)
                s_IDLE: begin
                    r_Rx_DV       <= 1'b0;
                    r_Clock_Count <= 0;
                    r_Bit_Index   <= 0;

                    if (r_Rx_Data == 1'b0) // Start bit detected
                        r_SM_Main <= s_RX_START_BIT;
                end

                s_RX_START_BIT: begin
                    if (r_Clock_Count == (CLKS_PER_BIT - 1) / 2) begin
                        if (r_Rx_Data == 1'b0) begin
                            r_Clock_Count <= 0;  // Reset counter, found the middle
                            r_SM_Main     <= s_RX_DATA_BITS;
                        end else begin
                            r_SM_Main <= s_IDLE;
                        end
                    end else begin
                        r_Clock_Count <= r_Clock_Count + 1;
                    end
                end

                s_RX_DATA_BITS: begin
                    if (r_Clock_Count < CLKS_PER_BIT - 1) begin
                        r_Clock_Count <= r_Clock_Count + 1;
                    end else begin
                        r_Clock_Count <= 0;
                        r_Rx_Byte[r_Bit_Index] <= r_Rx_Data;

                        if (r_Bit_Index < 7) begin
                            r_Bit_Index <= r_Bit_Index + 1;
                        end else begin
                            r_Bit_Index <= 0;
                            r_SM_Main   <= s_RX_STOP_BIT;
                        end
                    end
                end

                s_RX_STOP_BIT: begin
                    if (r_Clock_Count < CLKS_PER_BIT - 1) begin
                        r_Clock_Count <= r_Clock_Count + 1;
                    end else begin
                        r_Rx_DV       <= 1'b1;
                        r_Clock_Count <= 0;
                        r_SM_Main     <= s_CLEANUP;
                    end
                end

                s_CLEANUP: begin
                    r_SM_Main <= s_IDLE;
                    r_Rx_DV   <= 1'b0;
                end

                default: r_SM_Main <= s_IDLE;
            endcase
        end
    end

    assign rx_done = r_Rx_DV;
    assign rx_byte = r_Rx_Byte;
endmodule

//`timescale  1ns/1ps

//---------------------------------------------------------controller---------------------------------------------------

module Controller (
       input clk,
       input reset,
       input start,
       input low,
       input med,
       input hig,
       output heating_op,
       output spinning_op,
       output pouring_op,
       output waiting_op,
       output prog_op,
       output level_op,
       output temp_op,
       output dura_op
   );

   /*
   reset is also used as stop here
   */

   //-------------------------------------------------------state variable-------------------------------------------------

       reg [2:0] state_var;                //holds the state values
       reg [2:0] next_state_var;           //holds the next state values
       reg [2:0] prev_state;
       always @(next_state_var) begin
           state_var <= next_state_var;    //transfers the state values for the next state
       end

   //--------------------------------------------------------output variables----------------------------------------------

      reg heating;
      reg pouring;
      reg waiting;
      reg spinning;
      reg prog_op_reg;
      reg level_op_reg;
      reg temp_op_reg;
      reg dura_op_reg;

   //--------------------------------------------------------state values--------------------------------------------------

       //these variables holds the value of the state variable for comparison

       parameter program_selection = 3'd1;
       parameter temperature_selection = 3'd2;
       parameter water_level_selection = 3'd3;
       parameter duration = 3'd4;
       parameter wash = 3'd5;
       parameter rinse = 3'd6;
       parameter dry = 3'd7;

   //--------------------------------------------------------parameters---------------------------------------------------

       parameter med_heating = 12'd420; //12'd35; //enter med heating time => depends on temp     => 2.5 mins
       parameter hig_heating = 12'd840; //12'd70; //enter hig heating time => depends on temp     => 5 mins
       parameter low_pouring = 12'd200; //12'd28; //enter low pouring time => depends on level    => 2 mins
       parameter med_pouring = 12'd350; //12'd42; //enter med pouring time => depends on level    => 3 mins
       parameter hig_pouring = 12'd400; //12'd56; //enter hig pouring time => depends on level    => 4 mins
       /*
           proper time assignment is left that should be done here
           low timer => 5 mins
           med timer => 15 mins
           hig timer => 30 mins
       */
       parameter low_timer = 12'd2000; //12'd70; //enter time for low duration wash => depends on timer
       parameter med_timer = 12'd3000; //12'd210; //enter time for low duration wash => depends on timer
       parameter hig_timer = 12'd4000; //12'd420; //enter time for low duration wash => depends on timer


   //-------------------------------------------------------input_for_states-----------------------------------------------

       reg [1:0] timer;          //stores time signal

       reg [1:0] Program;          //stores mode signal

       reg [1:0] temp;             //stores temperature signal

       reg [1:0] level;            //stores water level signal

       reg [1:0] counter_status;   //stores counter status

       //reg count_done;             //doing nothing important

       reg rinse_status;           //provide rinse status for counter

       reg dry_status;             //provide drying status for counter

       reg [11:0] max_count;

   //----------------------------------------------------------controller--------------------------------------------------

       //always @(posedge clk or posedge reset or posedge start) begin
       always @(posedge clk) begin
           prev_state <= state_var;
           //synthesizable INITIAL BLOCK
           if(reset)
               //when reset is high the value of all the registers changes to zero (DEFAULT VALUE)
               begin
                   timer <= 2'b0;
                   Program <= 2'b0;
                   temp <= 2'b0;
                   level <= 2'b0;
                   prog_op_reg <= 1'b0;
                   dura_op_reg <= 1'b0;
                   level_op_reg <= 1'b0;
                   temp_op_reg <= 1'b0;
                   //counter_status <= 2'b0;
                   next_state_var <= 3'b0;
                   //count_done <= 1'b0;
                   //rinse_status <= 1'b0;
                   //dry_status <= 1'b0;
                   //max_count <= 12'b0;

                   //assigning output vairables to zero during reset

                   //heating <= 1'b0;
                   waiting <= 1'b0;
                   //spinning <= 1'b0;
                   //pouring <= 1'b0;
               end
           else if(start)
               //when start signal is applied the value of the state variable increases by one
               begin
                   next_state_var <= 3'b01;
               end
           else
               begin
                   case (state_var)

                       //Program selection stage

                       program_selection:
                           begin
                               prog_op_reg <= 1'b1;
                               waiting <= 1'b1;
                               if(low)
                                   begin
                                       Program <= 2'd1;
                                   end
                               else if(med)
                                   begin
                                       Program <= 2'd2;
                                   end
                               else if(hig)
                                   begin
                                       Program <= 2'd3;
                                   end
                               else if(next_state_var == temperature_selection |(Program != 2'b0 && (!low & !med & !hig)))
                                   begin
                                       next_state_var <= temperature_selection;
                                       waiting <= 1'b0;
                                   end
                               else
                                   next_state_var <= program_selection;
                           end

                       //temperature selection stage

                       temperature_selection:
                           begin
                               temp_op_reg <= 1'b1;
                               waiting <= 1'b1;
                               if(low)
                                   begin
                                       temp <= 2'd1;
                                   end
                               else if(med)
                                   begin
                                       temp <= 2'd2;
                                   end
                               else if(hig)
                                   begin
                                       temp <= 2'd3;
                                   end
                               else if(next_state_var == water_level_selection |(temp != 2'b0 && (!low & !med & !hig)))
                                   begin
                                       next_state_var <= water_level_selection;
                                       waiting <= 1'b0;
                                   end
                               else
                                   next_state_var <= temperature_selection;
                           end

                       //water level selection stage

                       water_level_selection:
                           begin
                               level_op_reg <= 1'b1;
                               waiting <= 1'b1;
                               if(low)
                                   begin
                                       level <= 2'd1;
                                   end
                               else if(med)
                                   begin
                                       level <= 2'd2;
                                   end
                               else if(hig)
                                   begin
                                       level <= 2'd3;
                                   end
                               else if(next_state_var == duration |(level != 2'b0 && (!low & !med & !hig)))
                                   begin
                                       next_state_var <= duration;
                                       waiting <= 1'b0;
                                   end
                               else
                                   next_state_var <= water_level_selection;
                           end

                       //duration selecion stage (updating timer value)

                       duration:
                           begin
                               dura_op_reg <= 1'b1;
                               waiting <= 1'b1;
                               if(low)
                                   begin
                                       timer <= 2'd1;
                                   end
                               else if(med)
                                   begin
                                       timer <= 2'd2;
                                   end
                               else if(hig)
                                   begin
                                       timer <= 2'd3;
                                   end
                               else if(next_state_var == wash |(timer != 2'b0 && (!low & !med & !hig)))
                                   begin
                                       next_state_var <= wash;
                                       //count_done <= 1'b0;
                                       waiting <= 1'b0;
                                   end
                               else
                                   next_state_var <= duration;
                           end
                       wash:
                           begin
                               //spinning <= 1'b1;
                               prog_op_reg <= 1'b0;
                               if(counter_status == 2'd2)
                                   begin
                                       next_state_var <= rinse;
                                   end
                               else
                                   begin
                                       next_state_var <= wash;
                                   end
                           end
                       rinse:
                           begin
                               level_op_reg <= 1'b0;
                               temp_op_reg <= 1'b0;
                               if(counter_status == 2'd2)
                                   begin
                                       next_state_var <= dry;
                                   end
                               else
                                   begin
                                       next_state_var <= rinse;
                                   end
                           end
                       dry:
                           begin
                               if(counter_status == 2'd2)
                                   begin
                                       dura_op_reg <= 1'b0;
                                       next_state_var <= 3'dx;
                                       timer <= 2'b0;
                                       Program <= 2'b0;
                                       temp <= 2'b0;
                                       level <= 2'b0;
                                       //counter_status <= 2'b0;
                                       next_state_var <= 3'b0;
                                       //count_done = 1'b0;
                                       //spinning <= 1'b0;
                                   end
                               else
                                   begin
                                       next_state_var <= dry;
                                   end
                           end
                           //default
                       default:
                           //this state can be used for pause as well
                           next_state_var <= next_state_var;

                   endcase
               end

       end

   //------------------------------------------------------------counter----------------------------------------------------


       //set appropriate counter values:
       reg [11:0] counter1 ;
       reg [31:0] counter2 ;

       //always @(posedge clk or posedge reset) begin
       always @(posedge clk) begin
           if(state_var == 3'b0)
              spinning <= 1'b0;
           else
              spinning <= spinning;
           if(reset)
           begin
               counter1 = 12'b0;
               counter2 <= 32'b0;
               max_count <= 12'b0;
               pouring <= 1'b0;
               heating <= 1'b0;
               spinning <= 1'b0;
               rinse_status <= 1'b0;
               dry_status <= 1'b0;
               counter_status <= 2'b0;
           end
           else
               begin
                   case (state_var)
                       wash:
                           begin
                               if(timer == 2'd1 && counter_status == 2'b0)
                                   begin
                                       counter1 = low_timer;
                                       if((temp==2'd1)&&(level==2'd1))
                                           counter1 = counter1 + low_pouring;
                                       else if((temp==2'd1)&&(level==2'd2))
                                           counter1 = counter1 + med_pouring;
                                       else if((temp==2'd1)&&(level==2'd3))
                                           counter1 = counter1 + hig_pouring;
                                       else if((temp==2'd2)&&(level==2'd1))
                                           counter1 = counter1 + med_heating + low_pouring;
                                       else if((temp==2'd2)&&(level==2'd2))
                                           counter1 = counter1 + med_heating + med_pouring;
                                       else if((temp==2'd2)&&(level==2'd3))
                                           counter1 = counter1 + med_heating + hig_pouring;
                                       else if((temp==2'd3)&&(level==2'd1))
                                           counter1 = counter1 + hig_heating + low_pouring;
                                       else if((temp==2'd3)&&(level==2'd2))
                                           counter1 = counter1 + hig_heating + med_pouring;
                                       else if((temp==2'd3)&&(level==2'd3))
                                           counter1 = counter1 + hig_heating + hig_pouring;
                                       else
                                           counter1 = counter1;

                                       max_count <= counter1;

                                   end
                               else if(timer == 2'd2 && counter_status == 2'b0)
                                   begin
                                       counter1 = med_timer;
                                       if((temp==2'd1)&&(level==2'd1))
                                           counter1 = counter1 + low_pouring;
                                       else if((temp==2'd1)&&(level==2'd2))
                                           counter1 = counter1 + med_pouring;
                                       else if((temp==2'd1)&&(level==2'd3))
                                           counter1 = counter1 + hig_pouring;
                                       else if((temp==2'd2)&&(level==2'd1))
                                           counter1 = counter1 + med_heating + low_pouring;
                                       else if((temp==2'd2)&&(level==2'd2))
                                           counter1 = counter1 + med_heating + med_pouring;
                                       else if((temp==2'd2)&&(level==2'd3))
                                           counter1 = counter1 + med_heating + hig_pouring;
                                       else if((temp==2'd3)&&(level==2'd1))
                                           counter1 = counter1 + hig_heating + low_pouring;
                                       else if((temp==2'd3)&&(level==2'd2))
                                           counter1 = counter1 + hig_heating + med_pouring;
                                       else if((temp==2'd3)&&(level==2'd3))
                                           counter1 = counter1 + hig_heating + hig_pouring;
                                       else
                                           counter1 = counter1;

                                       max_count <= counter1;

                                   end
                               else if(timer == 2'd3 && counter_status == 2'b0)
                                   begin
                                       counter1 = hig_timer;
                                       if((temp==2'd1)&&(level==2'd1))
                                           counter1 = counter1 + low_pouring;
                                       else if((temp==2'd1)&&(level==2'd2))
                                           counter1 = counter1 + med_pouring;
                                       else if((temp==2'd1)&&(level==2'd3))
                                           counter1 = counter1 + hig_pouring;
                                       else if((temp==2'd2)&&(level==2'd1))
                                           counter1 = counter1 + med_heating + low_pouring;
                                       else if((temp==2'd2)&&(level==2'd2))
                                           counter1 = counter1 + med_heating + med_pouring;
                                       else if((temp==2'd2)&&(level==2'd3))
                                           counter1 = counter1 + med_heating + hig_pouring;
                                       else if((temp==2'd3)&&(level==2'd1))
                                           counter1 = counter1 + hig_heating + low_pouring;
                                       else if((temp==2'd3)&&(level==2'd2))
                                           counter1 = counter1 + hig_heating + med_pouring;
                                       else if((temp==2'd3)&&(level==2'd3))
                                           counter1 = counter1 + hig_heating + hig_pouring;
                                       else
                                           counter1 = counter1;

                                       max_count <= counter1;

                                   end
                               else if((counter1 != 12'b0) && (counter2 == 32'b0))
                                   begin
                                       counter1 = counter1 - 12'b1;
                                   end
                               else
                                   begin
                                       counter1 = counter1;
                                       //code the conditions for heating and pouring here

                                       if(temp==2'd1 && level==2'd1)
                                           begin
                                               if((max_count - counter1) <=  low_pouring )
                                                   begin
                                                       pouring <= 1'b1;
                                                       spinning <= 1'b0;
                                                       heating <= 1'b0;
                                                   end
                                               else
                                                   begin
                                                       pouring <= 1'b0;
                                                       spinning <= 1'b1;
                                                       heating <= 1'b0;
                                                   end
                                           end
                                       else if(temp==2'd1 && level==2'd2)
                                           begin
                                               if((max_count - counter1) <= med_pouring)
                                                   begin
                                                       pouring <= 1'b1;
                                                       spinning <= 1'b0;
                                                       heating <= 1'b0;
                                                   end
                                               else
                                                   begin
                                                       pouring <= 1'b0;
                                                       spinning <= 1'b1;
                                                       heating <= 1'b0;
                                                   end
                                           end
                                       else if(temp==2'd1 && level==2'd3)
                                           begin
                                               if((max_count - counter1) <= hig_pouring )
                                                   begin
                                                       pouring <= 1'b1;
                                                       spinning <= 1'b0;
                                                       heating <= 1'b0;
                                                   end
                                               else
                                                   begin
                                                       pouring <= 1'b0;
                                                       spinning <= 1'b1;
                                                       heating <= 1'b0;
                                                   end
                                           end
                                       else if(temp==2'd2 && level==2'd1)
                                           begin
                                               if((max_count - counter1) <= med_heating )
                                                   begin
                                                       heating <= 1'b1;
                                                       spinning <= 1'b0;
                                                       pouring <= 1'b0;
                                                   end
                                               else if((max_count - counter1) <= (med_heating + low_pouring) )
                                                   begin
                                                       heating <= 1'b0;
                                                       pouring <= 1'b1;
                                                       spinning <= 1'b0;
                                                   end
                                               else
                                                   begin
                                                       pouring <= 1'b0;
                                                       spinning <= 1'b1;
                                                       heating <= 1'b0;
                                                   end
                                           end
                                       else if(temp==2'd2 && level==2'd2)
                                           begin
                                               if((max_count - counter1) <= med_heating )
                                                   begin
                                                       heating <= 1'b1;
                                                       spinning <= 1'b0;
                                                       pouring <= 1'b0;
                                                   end
                                               else if((max_count - counter1) <= (med_heating + med_pouring))
                                                   begin
                                                       heating <= 1'b0;
                                                       pouring <= 1'b1;
                                                       spinning <= 1'b0;
                                                   end
                                               else
                                                   begin
                                                       pouring <= 1'b0;
                                                       spinning <= 1'b1;
                                                       heating <= 1'b0;
                                                   end
                                           end
                                       else if(temp==2'd2 && level==2'd3)
                                           begin
                                               if((max_count - counter1) <= med_heating )
                                                   begin
                                                       heating <= 1'b1;
                                                       spinning <= 1'b0;
                                                       pouring <= 1'b0;
                                                   end
                                               else if((max_count - counter1) <= (med_heating + hig_pouring) )
                                                   begin
                                                       heating <= 1'b0;
                                                       pouring <= 1'b1;
                                                       spinning <= 1'b0;
                                                   end
                                               else
                                                   begin
                                                       pouring <= 1'b0;
                                                       spinning <= 1'b1;
                                                       heating <= 1'b0;
                                                   end
                                           end
                                       else if(temp==2'd3 && level==2'd1)
                                           begin
                                               if((max_count - counter1) <= hig_heating )
                                                   begin
                                                       heating <= 1'b1;
                                                       spinning <= 1'b0;
                                                       pouring <= 1'b0;
                                                   end
                                               else if((max_count - counter1) <= (hig_heating + low_pouring) )
                                                   begin
                                                       heating <= 1'b0;
                                                       pouring <= 1'b1;
                                                       spinning <= 1'b0;
                                                   end
                                               else
                                                   begin
                                                       pouring <= 1'b0;
                                                       spinning <= 1'b1;
                                                       heating <= 1'b0;
                                                   end
                                           end
                                       else if(temp==2'd3 && level==2'd2)
                                           begin
                                               if((max_count - counter1) <= hig_heating)
                                                   begin
                                                       heating <= 1'b1;
                                                       spinning <= 1'b0;
                                                       pouring <= 1'b0;
                                                   end
                                               else if((max_count - counter1) <= (hig_heating + med_pouring))
                                                   begin
                                                       heating <= 1'b0;
                                                       pouring <= 1'b1;
                                                       spinning <= 1'b0;
                                                   end
                                               else
                                                   begin
                                                       pouring <= 1'b0;
                                                       spinning <= 1'b1;
                                                       heating <= 1'b0;
                                                   end
                                           end
                                       else if(temp==2'd3 && level==2'd3)
                                           begin
                                               if((max_count - counter1) <= hig_heating)
                                                   begin
                                                       heating <= 1'b1;
                                                       spinning <= 1'b0;
                                                       pouring <= 1'b0;
                                                   end
                                               else if((max_count - counter1) <= (hig_heating + hig_pouring))
                                                   begin
                                                       heating <= 1'b0;
                                                       pouring <= 1'b1;
                                                       spinning <= 1'b0;
                                                   end
                                               else
                                                   begin
                                                       pouring <= 1'b0;
                                                       spinning <= 1'b1;
                                                       heating <= 1'b0;
                                                   end
                                           end
                                       else
                                           begin
                                               pouring <= 1'b0;
                                               heating <= 1'b0;
                                               spinning <= 1'b0;
                                           end
                                   end
                           end
                       rinse:
                           begin
                               if((counter1 == 12'b0) && (!rinse_status))
                                   begin
                                       counter1 = 12'd800;
                                       rinse_status <= 1'b1;
                                   end
                               else if((counter1 != 12'b0) && (counter2 == 32'b0))
                                   counter1 = counter1 - 12'b1;
                               else
                                   counter1 = counter1;
                           end
                       dry:
                           begin
                               if((counter1 == 12'b0) && (!dry_status))
                                   begin
                                       counter1 = 12'd800;
                                       dry_status <= 1'b1;
                                   end
                               else if((counter1 != 12'b0) && (counter2 == 32'b0))
                                   counter1 = counter1 - 12'b1;
                               else
                                   counter1 = counter1;
                           end
                       default:
                          begin
                             counter1 = counter1;
                      		  heating <= 1'b0;
                             pouring <= 1'b0;
                 //     		  waiting <= 1'b0;
                      		  spinning <= 1'b0;
                          end
                   endcase

                   if((counter1 != 12'b0)  && (counter2 != 32'b0))
                       counter2 <= counter2 - 32'b1;
                   else if((counter1 != 12'b0) && (counter2 == 32'b0))
                       counter2 <= 32'h003fffff;//32'd8; //32'hffffffff;
                   else
                       counter2 <= 32'h003fffff;//32'd8; //32'hffffffff;

                   //COUNTER TERMINATING CONDITIONS

                   if((counter1 == 12'b0) && ((state_var == wash) | (state_var == rinse) | (state_var == dry)) && (counter_status == 2'd1))
                       counter_status <= 2'd2;
                   else if((state_var == wash) | (state_var == rinse) | (state_var == dry))
                       counter_status <= 2'b1;
                   else if(prev_state != state_var)
                       counter_status <= 2'b0;
                   else
                       counter_status <= 2'b0;
               end

       end

       //reseting the state variable

      /* always @(state_var) begin

           counter_status <= 2'b0;

       end */

       //OUTPUT ASSIGNMENT
       assign heating_op = heating;
       assign pouring_op = pouring;
       assign waiting_op = waiting;
       assign spinning_op = spinning;
       assign prog_op = prog_op_reg;
       assign level_op = level_op_reg;
       assign temp_op = temp_op_reg;
       assign dura_op = dura_op_reg;

endmodule


//_\SV
   // Include Tiny Tapeout Lab.
   // Included URL: "https://raw.githubusercontent.com/os-fpga/Virtual-FPGA-Lab/5744600215af09224b7235479be84c30c6e50cb7/tlv_lib/tiny_tapeout_lib.tlv"// Included URL: "https://raw.githubusercontent.com/os-fpga/Virtual-FPGA-Lab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlv_lib/fpga_includes.tlv"
//_\source project.tlv 1230

//_\SV

// ================================================
// A simple Makerchip Verilog test bench driving random stimulus.
// Modify the module contents to your needs.
// ================================================

module top(input logic clk, input logic reset, input logic [31:0] cyc_cnt, output logic passed, output logic failed);
   // Tiny tapeout I/O signals.
   logic [7:0] ui_in, uo_out;
   logic [7:0] uio_in, uio_out, uio_oe;
   logic [31:0] r;  // a random value
   always @(posedge clk) r <= 0;
   assign ui_in = r[7:0];
   assign uio_in = 8'b0;
   logic ena = 1'b0;
   logic rst_n = ! reset;

   /*
   // Or, to provide specific inputs at specific times (as for lab C-TB) ...
   // BE SURE TO COMMENT THE ASSIGNMENT OF INPUTS ABOVE.
   // BE SURE TO DRIVE THESE ON THE B-PHASE OF THE CLOCK (ODD STEPS).
   // Driving on the rising clock edge creates a race with the clock that has unpredictable simulation behavior.
   initial begin
      #1  // Drive inputs on the B-phase.
         ui_in = 8'h0;
      #10 // Step 5 cycles, past reset.
         ui_in = 8'hFF;
      // ...etc.
   end
   */

   // Instantiate the Tiny Tapeout module.
   tt_um_iitbbs tt(.*);

   assign passed = top.cyc_cnt > 800;
   assign failed = 1'b0;
endmodule


// Provide a wrapper module to debounce input signals if requested.

//_\SV



// =======================
// The Tiny Tapeout module
// =======================

module tt_um_iitbbs (
    input  wire [7:0] ui_in,    // Dedicated inputs - connected to the input switches
    output wire [7:0] uo_out,   // Dedicated outputs - connected to the 7 segment display
       // The FPGA is based on TinyTapeout 3 which has no bidirectional I/Os (vs. TT6 for the ASIC).
    input  wire [7:0] uio_in,   // IOs: Bidirectional Input path
    output wire [7:0] uio_out,  // IOs: Bidirectional Output path
    output wire [7:0] uio_oe,   // IOs: Bidirectional Enable path (active high: 0=input, 1=output)
    
    input  wire       ena,      // will go high when the design is enabled
    input  wire       clk,      // clock
    input  wire       rst_n     // reset_n - low to reset
);
   wire reset = ! rst_n;

   // List all potentially-unused inputs to prevent warnings
   wire _unused = &{ena, clk, rst_n, 1'b0};

// ---------- Generated Code Inlined Here (before 1st \TLV) ----------
// Generated by SandPiper(TM) 1.14-2022/10/10-beta-Pro from Redwood EDA, LLC.
// Redwood EDA, LLC does not claim intellectual property rights to this file and provides no warranty regarding its correctness or quality.


// For silencing unused signal messages.
`define BOGUS_USE(ignore)


genvar digit, input_label, leds, switch;


//
// Signals declared top-level.
//

// For $slideswitch.
logic [7:0] L0_slideswitch_a0;

// For $sseg_decimal_point_n.
logic L0_sseg_decimal_point_n_a0;

// For $sseg_digit_n.
logic [7:0] L0_sseg_digit_n_a0;

// For $sseg_segment_n.
logic [6:0] L0_sseg_segment_n_a0;

// For /fpga_pins/fpga|controller$clk.
logic FpgaPins_Fpga_CONTROLLER_clk_a1;

// For /fpga_pins/fpga|controller$dura.
logic FpgaPins_Fpga_CONTROLLER_dura_a1;

// For /fpga_pins/fpga|controller$heat.
logic FpgaPins_Fpga_CONTROLLER_heat_a1;

// For /fpga_pins/fpga|controller$hig.
logic FpgaPins_Fpga_CONTROLLER_hig_a1;

// For /fpga_pins/fpga|controller$level.
logic FpgaPins_Fpga_CONTROLLER_level_a1;

// For /fpga_pins/fpga|controller$low.
logic FpgaPins_Fpga_CONTROLLER_low_a1;

// For /fpga_pins/fpga|controller$med.
logic FpgaPins_Fpga_CONTROLLER_med_a1;

// For /fpga_pins/fpga|controller$out.
logic [7:0] FpgaPins_Fpga_CONTROLLER_out_a1;

// For /fpga_pins/fpga|controller$pour.
logic FpgaPins_Fpga_CONTROLLER_pour_a1;

// For /fpga_pins/fpga|controller$prog.
logic FpgaPins_Fpga_CONTROLLER_prog_a1;

// For /fpga_pins/fpga|controller$reset.
logic FpgaPins_Fpga_CONTROLLER_reset_a1;

// For /fpga_pins/fpga|controller$spin.
logic FpgaPins_Fpga_CONTROLLER_spin_a1;

// For /fpga_pins/fpga|controller$start.
logic FpgaPins_Fpga_CONTROLLER_start_a1;

// For /fpga_pins/fpga|controller$temp.
logic FpgaPins_Fpga_CONTROLLER_temp_a1;

// For /fpga_pins/fpga|controller$wait.
logic FpgaPins_Fpga_CONTROLLER_wait_a1;

// For /fpga_pins/fpga|fsm$data.
logic [7:0] FpgaPins_Fpga_FSM_data_a1;

// For /fpga_pins/fpga|fsm$data_rd.
logic [7:0] FpgaPins_Fpga_FSM_data_rd_a1;

// For /fpga_pins/fpga|fsm$data_wr.
logic [7:0] FpgaPins_Fpga_FSM_data_wr_a1;

// For /fpga_pins/fpga|fsm$digit.
logic [3:0] FpgaPins_Fpga_FSM_digit_a1;

// For /fpga_pins/fpga|fsm$game_select.
logic FpgaPins_Fpga_FSM_game_select_a1;

// For /fpga_pins/fpga|fsm$idata_rd_addr.
logic [3:0] FpgaPins_Fpga_FSM_idata_rd_addr_a1;

// For /fpga_pins/fpga|fsm$idata_wr_addr.
logic [3:0] FpgaPins_Fpga_FSM_idata_wr_addr_a1;

// For /fpga_pins/fpga|fsm$imem_rd_addr.
logic [3:0] FpgaPins_Fpga_FSM_imem_rd_addr_a1;

// For /fpga_pins/fpga|fsm$imem_wr_addr.
logic [3:0] FpgaPins_Fpga_FSM_imem_wr_addr_a1;

// For /fpga_pins/fpga|fsm$instr.
logic [7:0] FpgaPins_Fpga_FSM_instr_a1;

// For /fpga_pins/fpga|fsm$instr_mem.
logic [7:0] FpgaPins_Fpga_FSM_instr_mem_a1;

// For /fpga_pins/fpga|fsm$instr_wr.
logic [7:0] FpgaPins_Fpga_FSM_instr_wr_a1;

// For /fpga_pins/fpga|fsm$instr_wr_en.
logic FpgaPins_Fpga_FSM_instr_wr_en_a1;

// For /fpga_pins/fpga|fsm$lipsi_select.
logic FpgaPins_Fpga_FSM_lipsi_select_a1;

// For /fpga_pins/fpga|fsm$prog_select.
logic FpgaPins_Fpga_FSM_prog_select_a1;

// For /fpga_pins/fpga|fsm$rd_en.
logic FpgaPins_Fpga_FSM_rd_en_a1;

// For /fpga_pins/fpga|fsm$wm_select.
logic FpgaPins_Fpga_FSM_wm_select_a1;

// For /fpga_pins/fpga|fsm$wr_en.
logic FpgaPins_Fpga_FSM_wr_en_a1;

// For /fpga_pins/fpga|game$clk_pulse.
logic FpgaPins_Fpga_GAME_clk_pulse_a1,
      FpgaPins_Fpga_GAME_clk_pulse_a2,
      FpgaPins_Fpga_GAME_clk_pulse_a3;

// For /fpga_pins/fpga|game$clk_pulse1.
logic FpgaPins_Fpga_GAME_clk_pulse1_a1,
      FpgaPins_Fpga_GAME_clk_pulse1_a2;

// For /fpga_pins/fpga|game$clk_pulse2.
logic FpgaPins_Fpga_GAME_clk_pulse2_a1,
      FpgaPins_Fpga_GAME_clk_pulse2_a2;

// For /fpga_pins/fpga|game$clk_pulse3.
logic FpgaPins_Fpga_GAME_clk_pulse3_a1,
      FpgaPins_Fpga_GAME_clk_pulse3_a2;

// For /fpga_pins/fpga|game$clk_pulse4.
logic FpgaPins_Fpga_GAME_clk_pulse4_a1,
      FpgaPins_Fpga_GAME_clk_pulse4_a2;

// For /fpga_pins/fpga|game$count_speed1.
logic [23:0] FpgaPins_Fpga_GAME_count_speed1_a1,
             FpgaPins_Fpga_GAME_count_speed1_a2;

// For /fpga_pins/fpga|game$count_speed2.
logic [20:0] FpgaPins_Fpga_GAME_count_speed2_a1,
             FpgaPins_Fpga_GAME_count_speed2_a2;

// For /fpga_pins/fpga|game$count_speed3.
logic [19:0] FpgaPins_Fpga_GAME_count_speed3_a1,
             FpgaPins_Fpga_GAME_count_speed3_a2;

// For /fpga_pins/fpga|game$count_speed4.
logic [18:0] FpgaPins_Fpga_GAME_count_speed4_a1,
             FpgaPins_Fpga_GAME_count_speed4_a2;

// For /fpga_pins/fpga|game$forward.
logic FpgaPins_Fpga_GAME_forward_a1,
      FpgaPins_Fpga_GAME_forward_a2;

// For /fpga_pins/fpga|game$led_output.
logic [7:0] FpgaPins_Fpga_GAME_led_output_a1,
            FpgaPins_Fpga_GAME_led_output_a2,
            FpgaPins_Fpga_GAME_led_output_a3;

// For /fpga_pins/fpga|game$left_btn.
logic FpgaPins_Fpga_GAME_left_btn_a1,
      FpgaPins_Fpga_GAME_left_btn_a2;

// For /fpga_pins/fpga|game$left_edge.
logic FpgaPins_Fpga_GAME_left_edge_a1;

// For /fpga_pins/fpga|game$out.
logic [7:0] FpgaPins_Fpga_GAME_out_a1;

// For /fpga_pins/fpga|game$reset.
logic FpgaPins_Fpga_GAME_reset_a1,
      FpgaPins_Fpga_GAME_reset_a2;

// For /fpga_pins/fpga|game$right_btn.
logic FpgaPins_Fpga_GAME_right_btn_a1,
      FpgaPins_Fpga_GAME_right_btn_a2;

// For /fpga_pins/fpga|game$right_edge.
logic FpgaPins_Fpga_GAME_right_edge_a1;

// For /fpga_pins/fpga|game$score.
logic [7:0] FpgaPins_Fpga_GAME_score_a1,
            FpgaPins_Fpga_GAME_score_a2,
            FpgaPins_Fpga_GAME_score_a3,
            FpgaPins_Fpga_GAME_score_a4;

// For /fpga_pins/fpga|game$speed_level.
logic [1:0] FpgaPins_Fpga_GAME_speed_level_a1,
            FpgaPins_Fpga_GAME_speed_level_a2;

// For /fpga_pins/fpga|game$state.
logic [1:0] FpgaPins_Fpga_GAME_state_a1,
            FpgaPins_Fpga_GAME_state_a2,
            FpgaPins_Fpga_GAME_state_a3,
            FpgaPins_Fpga_GAME_state_a4;

// For /fpga_pins/fpga|game$wait_counter.
logic [24:0] FpgaPins_Fpga_GAME_wait_counter_a1,
             FpgaPins_Fpga_GAME_wait_counter_a2;

// For /fpga_pins/fpga|game$win.
logic [1:0] FpgaPins_Fpga_GAME_win_a1,
            FpgaPins_Fpga_GAME_win_a2;

// For /fpga_pins/fpga|lipsi$acc.
logic [7:0] FpgaPins_Fpga_LIPSI_acc_a1,
            FpgaPins_Fpga_LIPSI_acc_a2;

// For /fpga_pins/fpga|lipsi$c.
logic FpgaPins_Fpga_LIPSI_c_a1,
      FpgaPins_Fpga_LIPSI_c_a2;

// For /fpga_pins/fpga|lipsi$data.
logic [7:0] FpgaPins_Fpga_LIPSI_data_a1,
            FpgaPins_Fpga_LIPSI_data_a2;

// For /fpga_pins/fpga|lipsi$data_wr.
logic [7:0] FpgaPins_Fpga_LIPSI_data_wr_a1,
            FpgaPins_Fpga_LIPSI_data_wr_a2;

// For /fpga_pins/fpga|lipsi$digit.
logic [3:0] FpgaPins_Fpga_LIPSI_digit_a1;

// For /fpga_pins/fpga|lipsi$dptr.
logic [7:0] FpgaPins_Fpga_LIPSI_dptr_a1,
            FpgaPins_Fpga_LIPSI_dptr_a2;

// For /fpga_pins/fpga|lipsi$exit.
logic FpgaPins_Fpga_LIPSI_exit_a1,
      FpgaPins_Fpga_LIPSI_exit_a2;

// For /fpga_pins/fpga|lipsi$func.
logic [2:0] FpgaPins_Fpga_LIPSI_func_a1;

// For /fpga_pins/fpga|lipsi$instr.
logic [7:0] FpgaPins_Fpga_LIPSI_instr_a1,
            FpgaPins_Fpga_LIPSI_instr_a2;

// For /fpga_pins/fpga|lipsi$is_2cyc.
logic FpgaPins_Fpga_LIPSI_is_2cyc_a1,
      FpgaPins_Fpga_LIPSI_is_2cyc_a2;

// For /fpga_pins/fpga|lipsi$is_ALU.
logic FpgaPins_Fpga_LIPSI_is_ALU_a1;

// For /fpga_pins/fpga|lipsi$is_ALU_imm.
logic FpgaPins_Fpga_LIPSI_is_ALU_imm_a1,
      FpgaPins_Fpga_LIPSI_is_ALU_imm_a2;

// For /fpga_pins/fpga|lipsi$is_ALU_reg.
logic FpgaPins_Fpga_LIPSI_is_ALU_reg_a1;

// For /fpga_pins/fpga|lipsi$is_br.
logic FpgaPins_Fpga_LIPSI_is_br_a1,
      FpgaPins_Fpga_LIPSI_is_br_a2,
      FpgaPins_Fpga_LIPSI_is_br_a3;

// For /fpga_pins/fpga|lipsi$is_brl.
logic FpgaPins_Fpga_LIPSI_is_brl_a1,
      FpgaPins_Fpga_LIPSI_is_brl_a2;

// For /fpga_pins/fpga|lipsi$is_brnz.
logic FpgaPins_Fpga_LIPSI_is_brnz_a1,
      FpgaPins_Fpga_LIPSI_is_brnz_a2,
      FpgaPins_Fpga_LIPSI_is_brnz_a3;

// For /fpga_pins/fpga|lipsi$is_brz.
logic FpgaPins_Fpga_LIPSI_is_brz_a1,
      FpgaPins_Fpga_LIPSI_is_brz_a2,
      FpgaPins_Fpga_LIPSI_is_brz_a3;

// For /fpga_pins/fpga|lipsi$is_ld_ind.
logic FpgaPins_Fpga_LIPSI_is_ld_ind_a1,
      FpgaPins_Fpga_LIPSI_is_ld_ind_a2;

// For /fpga_pins/fpga|lipsi$is_ret.
logic FpgaPins_Fpga_LIPSI_is_ret_a1,
      FpgaPins_Fpga_LIPSI_is_ret_a2;

// For /fpga_pins/fpga|lipsi$is_sh.
logic FpgaPins_Fpga_LIPSI_is_sh_a1;

// For /fpga_pins/fpga|lipsi$is_st.
logic FpgaPins_Fpga_LIPSI_is_st_a1;

// For /fpga_pins/fpga|lipsi$is_st_ind.
logic FpgaPins_Fpga_LIPSI_is_st_ind_a1,
      FpgaPins_Fpga_LIPSI_is_st_ind_a2;

// For /fpga_pins/fpga|lipsi$op.
logic [7:0] FpgaPins_Fpga_LIPSI_op_a1;

// For /fpga_pins/fpga|lipsi$pc.
logic [7:0] FpgaPins_Fpga_LIPSI_pc_a1,
            FpgaPins_Fpga_LIPSI_pc_a2;

// For /fpga_pins/fpga|lipsi$rd_en.
logic FpgaPins_Fpga_LIPSI_rd_en_a1;

// For /fpga_pins/fpga|lipsi$reset.
logic FpgaPins_Fpga_LIPSI_reset_a1,
      FpgaPins_Fpga_LIPSI_reset_a2;

// For /fpga_pins/fpga|lipsi$valid.
logic FpgaPins_Fpga_LIPSI_valid_a1;

// For /fpga_pins/fpga|lipsi$wr_en.
logic FpgaPins_Fpga_LIPSI_wr_en_a1;

// For /fpga_pins/fpga|lipsi$z.
logic FpgaPins_Fpga_LIPSI_z_a1,
      FpgaPins_Fpga_LIPSI_z_a2;

// For /fpga_pins/fpga|uart$comment.
logic FpgaPins_Fpga_UART_comment_a1,
      FpgaPins_Fpga_UART_comment_a2;

// For /fpga_pins/fpga|uart$data.
logic [7:0] FpgaPins_Fpga_UART_data_a1,
            FpgaPins_Fpga_UART_data_a2;

// For /fpga_pins/fpga|uart$data_wr.
logic [7:0] FpgaPins_Fpga_UART_data_wr_a1;

// For /fpga_pins/fpga|uart$digit.
logic [3:0] FpgaPins_Fpga_UART_digit_a1;

// For /fpga_pins/fpga|uart$dptr.
logic [3:0] FpgaPins_Fpga_UART_dptr_a1,
            FpgaPins_Fpga_UART_dptr_a2;

// For /fpga_pins/fpga|uart$first_byte.
logic FpgaPins_Fpga_UART_first_byte_a1,
      FpgaPins_Fpga_UART_first_byte_a2;

// For /fpga_pins/fpga|uart$idata_wr_addr.
logic [3:0] FpgaPins_Fpga_UART_idata_wr_addr_a1;

// For /fpga_pins/fpga|uart$imem_wr_addr.
logic [3:0] FpgaPins_Fpga_UART_imem_wr_addr_a1;

// For /fpga_pins/fpga|uart$instr_wr.
logic [7:0] FpgaPins_Fpga_UART_instr_wr_a1;

// For /fpga_pins/fpga|uart$instr_wr_en.
logic FpgaPins_Fpga_UART_instr_wr_en_a1;

// For /fpga_pins/fpga|uart$is_enter.
logic FpgaPins_Fpga_UART_is_enter_a1,
      FpgaPins_Fpga_UART_is_enter_a2;

// For /fpga_pins/fpga|uart$is_hash.
logic FpgaPins_Fpga_UART_is_hash_a1;

// For /fpga_pins/fpga|uart$pc.
logic [3:0] FpgaPins_Fpga_UART_pc_a1,
            FpgaPins_Fpga_UART_pc_a2;

// For /fpga_pins/fpga|uart$prog_mem.
logic FpgaPins_Fpga_UART_prog_mem_a1;

// For /fpga_pins/fpga|uart$reset.
logic FpgaPins_Fpga_UART_reset_a1;

// For /fpga_pins/fpga|uart$rx_byte.
logic [7:0] FpgaPins_Fpga_UART_rx_byte_a1;

// For /fpga_pins/fpga|uart$rx_done.
logic FpgaPins_Fpga_UART_rx_done_a1;

// For /fpga_pins/fpga|uart$rx_serial.
logic FpgaPins_Fpga_UART_rx_serial_a1;

// For /fpga_pins/fpga|uart$valid_rx_done.
logic FpgaPins_Fpga_UART_valid_rx_done_a1;

// For /fpga_pins/fpga|uart$wr_en.
logic FpgaPins_Fpga_UART_wr_en_a1;




   //
   // Scope: /fpga_pins
   //


      //
      // Scope: /fpga
      //


         //
         // Scope: |game
         //

            // Staging of $clk_pulse.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_clk_pulse_a2 <= FpgaPins_Fpga_GAME_clk_pulse_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_clk_pulse_a3 <= FpgaPins_Fpga_GAME_clk_pulse_a2;

            // Staging of $clk_pulse1.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_clk_pulse1_a2 <= FpgaPins_Fpga_GAME_clk_pulse1_a1;

            // Staging of $clk_pulse2.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_clk_pulse2_a2 <= FpgaPins_Fpga_GAME_clk_pulse2_a1;

            // Staging of $clk_pulse3.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_clk_pulse3_a2 <= FpgaPins_Fpga_GAME_clk_pulse3_a1;

            // Staging of $clk_pulse4.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_clk_pulse4_a2 <= FpgaPins_Fpga_GAME_clk_pulse4_a1;

            // Staging of $count_speed1.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_count_speed1_a2[23:0] <= FpgaPins_Fpga_GAME_count_speed1_a1[23:0];

            // Staging of $count_speed2.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_count_speed2_a2[20:0] <= FpgaPins_Fpga_GAME_count_speed2_a1[20:0];

            // Staging of $count_speed3.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_count_speed3_a2[19:0] <= FpgaPins_Fpga_GAME_count_speed3_a1[19:0];

            // Staging of $count_speed4.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_count_speed4_a2[18:0] <= FpgaPins_Fpga_GAME_count_speed4_a1[18:0];

            // Staging of $forward.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_forward_a2 <= FpgaPins_Fpga_GAME_forward_a1;

            // Staging of $led_output.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_led_output_a2[7:0] <= FpgaPins_Fpga_GAME_led_output_a1[7:0];
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_led_output_a3[7:0] <= FpgaPins_Fpga_GAME_led_output_a2[7:0];

            // Staging of $left_btn.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_left_btn_a2 <= FpgaPins_Fpga_GAME_left_btn_a1;

            // Staging of $reset.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_reset_a2 <= FpgaPins_Fpga_GAME_reset_a1;

            // Staging of $right_btn.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_right_btn_a2 <= FpgaPins_Fpga_GAME_right_btn_a1;

            // Staging of $score.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_score_a2[7:0] <= FpgaPins_Fpga_GAME_score_a1[7:0];
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_score_a3[7:0] <= FpgaPins_Fpga_GAME_score_a2[7:0];
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_score_a4[7:0] <= FpgaPins_Fpga_GAME_score_a3[7:0];

            // Staging of $speed_level.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_speed_level_a2[1:0] <= FpgaPins_Fpga_GAME_speed_level_a1[1:0];

            // Staging of $state.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_state_a2[1:0] <= FpgaPins_Fpga_GAME_state_a1[1:0];
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_state_a3[1:0] <= FpgaPins_Fpga_GAME_state_a2[1:0];
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_state_a4[1:0] <= FpgaPins_Fpga_GAME_state_a3[1:0];

            // Staging of $wait_counter.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_wait_counter_a2[24:0] <= FpgaPins_Fpga_GAME_wait_counter_a1[24:0];

            // Staging of $win.
            always_ff @(posedge clk) FpgaPins_Fpga_GAME_win_a2[1:0] <= FpgaPins_Fpga_GAME_win_a1[1:0];



         //
         // Scope: |lipsi
         //

            // Staging of $acc.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_acc_a2[7:0] <= FpgaPins_Fpga_LIPSI_acc_a1[7:0];

            // Staging of $c.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_c_a2 <= FpgaPins_Fpga_LIPSI_c_a1;

            // Staging of $data.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_data_a2[7:0] <= FpgaPins_Fpga_LIPSI_data_a1[7:0];

            // Staging of $data_wr.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_data_wr_a2[7:0] <= FpgaPins_Fpga_LIPSI_data_wr_a1[7:0];

            // Staging of $dptr.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_dptr_a2[7:0] <= FpgaPins_Fpga_LIPSI_dptr_a1[7:0];

            // Staging of $exit.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_exit_a2 <= FpgaPins_Fpga_LIPSI_exit_a1;

            // Staging of $instr.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_instr_a2[7:0] <= FpgaPins_Fpga_LIPSI_instr_a1[7:0];

            // Staging of $is_2cyc.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_is_2cyc_a2 <= FpgaPins_Fpga_LIPSI_is_2cyc_a1;

            // Staging of $is_ALU_imm.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_is_ALU_imm_a2 <= FpgaPins_Fpga_LIPSI_is_ALU_imm_a1;

            // Staging of $is_br.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_is_br_a2 <= FpgaPins_Fpga_LIPSI_is_br_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_is_br_a3 <= FpgaPins_Fpga_LIPSI_is_br_a2;

            // Staging of $is_brl.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_is_brl_a2 <= FpgaPins_Fpga_LIPSI_is_brl_a1;

            // Staging of $is_brnz.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_is_brnz_a2 <= FpgaPins_Fpga_LIPSI_is_brnz_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_is_brnz_a3 <= FpgaPins_Fpga_LIPSI_is_brnz_a2;

            // Staging of $is_brz.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_is_brz_a2 <= FpgaPins_Fpga_LIPSI_is_brz_a1;
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_is_brz_a3 <= FpgaPins_Fpga_LIPSI_is_brz_a2;

            // Staging of $is_ld_ind.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_is_ld_ind_a2 <= FpgaPins_Fpga_LIPSI_is_ld_ind_a1;

            // Staging of $is_ret.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_is_ret_a2 <= FpgaPins_Fpga_LIPSI_is_ret_a1;

            // Staging of $is_st_ind.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_is_st_ind_a2 <= FpgaPins_Fpga_LIPSI_is_st_ind_a1;

            // Staging of $pc.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_pc_a2[7:0] <= FpgaPins_Fpga_LIPSI_pc_a1[7:0];

            // Staging of $reset.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_reset_a2 <= FpgaPins_Fpga_LIPSI_reset_a1;

            // Staging of $z.
            always_ff @(posedge clk) FpgaPins_Fpga_LIPSI_z_a2 <= FpgaPins_Fpga_LIPSI_z_a1;



         //
         // Scope: |uart
         //

            // Staging of $comment.
            always_ff @(posedge clk) FpgaPins_Fpga_UART_comment_a2 <= FpgaPins_Fpga_UART_comment_a1;

            // Staging of $data.
            always_ff @(posedge clk) FpgaPins_Fpga_UART_data_a2[7:0] <= FpgaPins_Fpga_UART_data_a1[7:0];

            // Staging of $dptr.
            always_ff @(posedge clk) FpgaPins_Fpga_UART_dptr_a2[3:0] <= FpgaPins_Fpga_UART_dptr_a1[3:0];

            // Staging of $first_byte.
            always_ff @(posedge clk) FpgaPins_Fpga_UART_first_byte_a2 <= FpgaPins_Fpga_UART_first_byte_a1;

            // Staging of $is_enter.
            always_ff @(posedge clk) FpgaPins_Fpga_UART_is_enter_a2 <= FpgaPins_Fpga_UART_is_enter_a1;

            // Staging of $pc.
            always_ff @(posedge clk) FpgaPins_Fpga_UART_pc_a2[3:0] <= FpgaPins_Fpga_UART_pc_a1[3:0];





// ---------- Generated Code Ends ----------
//_\TLV
   /* verilator lint_off UNOPTFLAT */
   //_\source project.tlv 1224   // Instantiated from project.tlv, 1301 as: m5+tt_lab.
      // Connect Tiny Tapeout I/Os to Virtual FPGA Lab.
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/5744600215af09224b7235479be84c30c6e50cb7/tlvlib/tinytapeoutlib.tlv 76   // Instantiated from project.tlv, 1226 as: m5+tt_connections()
         assign L0_slideswitch_a0[7:0] = ui_in;
         assign L0_sseg_segment_n_a0[6:0] = ~ uo_out[6:0];
         assign L0_sseg_decimal_point_n_a0 = ~ uo_out[7];
         assign L0_sseg_digit_n_a0[7:0] = 8'b11111110;
      //_\end_source
      // Instantiate the Virtual FPGA Lab.
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 307   // Instantiated from project.tlv, 1228 as: m5+board(/top, /fpga, 7, $, , my_design)
         
         //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 355   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 309 as: m4+thanks(m5__l(309)m5_eval(m5_get(BOARD_THANKS_ARGS)))
            //_/thanks
               
         //_\end_source
         
      
         // Board VIZ.
      
         // Board Image.
         
         //_/fpga_pins
            
            //_/fpga
               //_\source project.tlv 865   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 340 as: m4+my_design.
               
               
               
                  // ==================
                  // |                |
                  // | YOUR CODE HERE |
                  // |                |
                  // ==================
               
                  // Note that pipesignals assigned here can be found under /fpga_pins/fpga.
                  //_|fsm
                     //_@1
                        assign FpgaPins_Fpga_FSM_wm_select_a1 = ui_in[0] && ui_in[7] ;
                        assign FpgaPins_Fpga_FSM_game_select_a1 = !ui_in[0] && ui_in[7];
                        assign FpgaPins_Fpga_FSM_prog_select_a1 = !ui_in[7] && ui_in[0];// 0 means lipsi 1 means uart
                        assign FpgaPins_Fpga_FSM_lipsi_select_a1 = !ui_in[0] && !ui_in[7];
               
                        assign FpgaPins_Fpga_FSM_imem_rd_addr_a1[3:0] = FpgaPins_Fpga_LIPSI_pc_a1[3:0];
                        assign FpgaPins_Fpga_FSM_instr_a1[7:0] = FpgaPins_Fpga_FSM_instr_mem_a1;
                        assign FpgaPins_Fpga_FSM_idata_rd_addr_a1[3:0] = FpgaPins_Fpga_LIPSI_dptr_a1[3:0];
                        assign FpgaPins_Fpga_FSM_data_a1[7:0] = FpgaPins_Fpga_FSM_data_rd_a1;
                        assign FpgaPins_Fpga_FSM_rd_en_a1 = FpgaPins_Fpga_LIPSI_rd_en_a1;
               
               
                        assign FpgaPins_Fpga_FSM_wr_en_a1 = FpgaPins_Fpga_LIPSI_reset_a1 ? FpgaPins_Fpga_UART_wr_en_a1 : FpgaPins_Fpga_LIPSI_wr_en_a1;
                        assign FpgaPins_Fpga_FSM_idata_wr_addr_a1[3:0] = FpgaPins_Fpga_LIPSI_reset_a1 ? FpgaPins_Fpga_UART_idata_wr_addr_a1[3:0] :FpgaPins_Fpga_LIPSI_dptr_a1[3:0];
                        assign FpgaPins_Fpga_FSM_data_wr_a1[7:0] = FpgaPins_Fpga_LIPSI_reset_a1 ? FpgaPins_Fpga_UART_data_wr_a1 : FpgaPins_Fpga_LIPSI_data_wr_a1;
               
                        assign FpgaPins_Fpga_FSM_instr_wr_a1[7:0] = FpgaPins_Fpga_UART_instr_wr_a1[7:0];
                        assign FpgaPins_Fpga_FSM_imem_wr_addr_a1[3:0] = FpgaPins_Fpga_UART_imem_wr_addr_a1[3:0];
                        assign FpgaPins_Fpga_FSM_instr_wr_en_a1 = FpgaPins_Fpga_UART_instr_wr_en_a1;
                        assign FpgaPins_Fpga_FSM_digit_a1[3:0] = FpgaPins_Fpga_LIPSI_reset_a1 ? FpgaPins_Fpga_UART_digit_a1 : FpgaPins_Fpga_LIPSI_digit_a1;
                        assign uo_out[7:0] = FpgaPins_Fpga_FSM_wm_select_a1
                              ?FpgaPins_Fpga_CONTROLLER_out_a1:
                           FpgaPins_Fpga_FSM_game_select_a1
                              ?FpgaPins_Fpga_GAME_out_a1:
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b0000
                              ? 8'b00111111 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b0001
                              ? 8'b00000110 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b0010
                              ? 8'b01011011 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b0011
                              ? 8'b01001111 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b0100
                              ? 8'b01100110 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b0101
                              ? 8'b01101101 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b0110
                              ? 8'b01111101 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b0111
                              ? 8'b00000111 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b1000
                              ? 8'b01111111 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b1001
                              ? 8'b01101111 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b1010
                              ? 8'b01110111 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b1011
                              ? 8'b01111100 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b1100
                              ? 8'b00111001 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b1101
                              ? 8'b01011110 :
                           FpgaPins_Fpga_FSM_digit_a1[3:0] == 4'b1110
                              ? 8'b01111001 : 8'b01110001 ;
                     //_\source project.tlv 35   // Instantiated from project.tlv, 932 as: m5+imem(@1)
                        // Instruction Memory containing program.
                        //_@1
                           /*SV_plus*/
                              // The program in an instruction memory.
                              reg [7:0] instrs [15:0], datam[15:0];
                              initial begin
                                  instrs[0] = 8'h70; // Custom 8-bit data for instruction 0
                                  instrs[1] = 8'h01; // Custom 8-bit data for instruction 1
                                  instrs[2] = 8'h80; // Custom 8-bit data for instruction 2
                                  instrs[3] = 8'h72;
                                  instrs[4] = 8'h13;
                                  instrs[5] = 8'h82;
                                  instrs[6] = 8'hC7;
                                  instrs[7] = 8'h35;
                                  instrs[8] = 8'hFF;
                                  instrs[9] = 8'hFF; // Custom data for instruction 10
                     
                                  datam[0] =8'h00;
                                  datam[1] =8'h06;
                                  datam[2] =8'h04;
                                  datam[3] =8'h01;
                                  datam[4] =8'h09;
                                  datam[8] =8'h05;
                              end
                           /* verilator lint_off WIDTHEXPAND */
                           assign FpgaPins_Fpga_FSM_instr_mem_a1[7:0] = instrs[FpgaPins_Fpga_FSM_imem_rd_addr_a1[3:0]];
                           //_?$rd_en
                              assign FpgaPins_Fpga_FSM_data_rd_a1[7:0] = datam[FpgaPins_Fpga_FSM_idata_rd_addr_a1[3:0]];
                           /*SV_plus*/
                              always@(posedge clk)
                                 if(FpgaPins_Fpga_FSM_wr_en_a1)
                                    datam[FpgaPins_Fpga_FSM_idata_wr_addr_a1[3:0]] <= FpgaPins_Fpga_FSM_data_wr_a1[7:0];
                              always@(posedge clk)
                                 if(FpgaPins_Fpga_FSM_instr_wr_en_a1)
                                    instrs[FpgaPins_Fpga_FSM_imem_wr_addr_a1[3:0]] <= FpgaPins_Fpga_FSM_instr_wr_a1[7:0];
                           /* verilator lint_off WIDTHEXPAND */
                     //_\end_source
               
                  //_|controller
                     //_@1
                        assign FpgaPins_Fpga_CONTROLLER_reset_a1 = !FpgaPins_Fpga_FSM_wm_select_a1 || reset ;
                        assign FpgaPins_Fpga_CONTROLLER_clk_a1 = clk;
                        assign FpgaPins_Fpga_CONTROLLER_start_a1 = ui_in[1];
                        assign FpgaPins_Fpga_CONTROLLER_low_a1 = ui_in[2];
                        assign FpgaPins_Fpga_CONTROLLER_med_a1 = ui_in[3];
                        assign FpgaPins_Fpga_CONTROLLER_hig_a1 = ui_in[4];
               
                        /*SV_plus*/
                           Controller C1(.clk(FpgaPins_Fpga_CONTROLLER_clk_a1),
                                       .reset(FpgaPins_Fpga_CONTROLLER_reset_a1),
                                       .start(FpgaPins_Fpga_CONTROLLER_start_a1),
                                       .low(FpgaPins_Fpga_CONTROLLER_low_a1),
                                       .hig(FpgaPins_Fpga_CONTROLLER_hig_a1),
                                       .med(FpgaPins_Fpga_CONTROLLER_med_a1),
                                       .heating_op(FpgaPins_Fpga_CONTROLLER_heat_a1),
                                       .spinning_op(FpgaPins_Fpga_CONTROLLER_spin_a1),
                                       .pouring_op(FpgaPins_Fpga_CONTROLLER_pour_a1),
                                       .waiting_op(FpgaPins_Fpga_CONTROLLER_wait_a1),
                                       .prog_op(FpgaPins_Fpga_CONTROLLER_prog_a1),
                                       .level_op(FpgaPins_Fpga_CONTROLLER_level_a1),
                                       .temp_op(FpgaPins_Fpga_CONTROLLER_temp_a1),
                                       .dura_op(FpgaPins_Fpga_CONTROLLER_dura_a1));
                        assign FpgaPins_Fpga_CONTROLLER_out_a1[7:0] = {FpgaPins_Fpga_CONTROLLER_heat_a1,FpgaPins_Fpga_CONTROLLER_spin_a1,FpgaPins_Fpga_CONTROLLER_pour_a1,FpgaPins_Fpga_CONTROLLER_wait_a1,FpgaPins_Fpga_CONTROLLER_prog_a1,FpgaPins_Fpga_CONTROLLER_level_a1,FpgaPins_Fpga_CONTROLLER_temp_a1,FpgaPins_Fpga_CONTROLLER_dura_a1};
               
                  //_|game
                     //_@1
                        assign FpgaPins_Fpga_GAME_reset_a1 = !FpgaPins_Fpga_FSM_game_select_a1 || reset ;
                        assign FpgaPins_Fpga_GAME_count_speed4_a1[18:0] = (FpgaPins_Fpga_GAME_reset_a2 || FpgaPins_Fpga_GAME_count_speed4_a2 == 19'd500000 ) ? 19'b0 : FpgaPins_Fpga_GAME_count_speed4_a2 +1 ;
                        assign FpgaPins_Fpga_GAME_clk_pulse4_a1 = FpgaPins_Fpga_GAME_reset_a2 ? 1'b0: FpgaPins_Fpga_GAME_count_speed4_a1 == 19'd500000 ? ~FpgaPins_Fpga_GAME_clk_pulse4_a2 : FpgaPins_Fpga_GAME_clk_pulse4_a2 ;
                        assign FpgaPins_Fpga_GAME_count_speed3_a1[19:0] = (FpgaPins_Fpga_GAME_reset_a2 || FpgaPins_Fpga_GAME_count_speed3_a2 == 20'd900000 ) ? 20'b0 : FpgaPins_Fpga_GAME_count_speed3_a2 +1 ;
                        assign FpgaPins_Fpga_GAME_clk_pulse3_a1 = FpgaPins_Fpga_GAME_reset_a2 ? 1'b0: FpgaPins_Fpga_GAME_count_speed3_a1 == 20'd900000 ? ~FpgaPins_Fpga_GAME_clk_pulse3_a2 : FpgaPins_Fpga_GAME_clk_pulse3_a2 ;
                        assign FpgaPins_Fpga_GAME_count_speed2_a1[20:0] = (FpgaPins_Fpga_GAME_reset_a2 || FpgaPins_Fpga_GAME_count_speed2_a2 == 21'd1700000 ) ? 21'b0 : FpgaPins_Fpga_GAME_count_speed2_a2 +1 ;
                        assign FpgaPins_Fpga_GAME_clk_pulse2_a1 = FpgaPins_Fpga_GAME_reset_a2 ? 1'b0: FpgaPins_Fpga_GAME_count_speed2_a1 == 21'd1700000 ? ~FpgaPins_Fpga_GAME_clk_pulse2_a2 : FpgaPins_Fpga_GAME_clk_pulse2_a2 ;
                        assign FpgaPins_Fpga_GAME_count_speed1_a1[23:0] = (FpgaPins_Fpga_GAME_reset_a2 || FpgaPins_Fpga_GAME_count_speed1_a2 == 24'd2000000 ) ? 24'b0 : FpgaPins_Fpga_GAME_count_speed1_a2 +1 ;
                        assign FpgaPins_Fpga_GAME_clk_pulse1_a1 = FpgaPins_Fpga_GAME_reset_a2 ? 1'b0: FpgaPins_Fpga_GAME_count_speed1_a1 == 24'd2000000 ? ~FpgaPins_Fpga_GAME_clk_pulse1_a2 : FpgaPins_Fpga_GAME_clk_pulse1_a2 ;
               
                        assign FpgaPins_Fpga_GAME_speed_level_a1[1:0] = FpgaPins_Fpga_GAME_reset_a2 || (FpgaPins_Fpga_GAME_state_a3 == 2'b01 && FpgaPins_Fpga_GAME_state_a4 == 2'b10) ? 2'b0 :
                              (FpgaPins_Fpga_GAME_right_edge_a1 && FpgaPins_Fpga_GAME_led_output_a1 == 8'h01) || (FpgaPins_Fpga_GAME_left_edge_a1  && FpgaPins_Fpga_GAME_led_output_a1 == 8'h80)
                                 ? 2'd3
                              :  (FpgaPins_Fpga_GAME_right_edge_a1 && FpgaPins_Fpga_GAME_led_output_a1 == 8'h02) || (FpgaPins_Fpga_GAME_left_edge_a1  && FpgaPins_Fpga_GAME_led_output_a1 == 8'h40)
                                 ? 2'd2
                              :  (FpgaPins_Fpga_GAME_right_edge_a1 && FpgaPins_Fpga_GAME_led_output_a1 == 8'h04) || (FpgaPins_Fpga_GAME_left_edge_a1  && FpgaPins_Fpga_GAME_led_output_a1 == 8'h20)
                                 ? 2'd1
                              :  (FpgaPins_Fpga_GAME_right_edge_a1 && FpgaPins_Fpga_GAME_led_output_a1 == 8'h08) || (FpgaPins_Fpga_GAME_left_edge_a1  && FpgaPins_Fpga_GAME_led_output_a1 == 8'h10)
                                 ? 2'd0
                                 //default
                                 : FpgaPins_Fpga_GAME_speed_level_a2;
                        assign FpgaPins_Fpga_GAME_clk_pulse_a1 = (FpgaPins_Fpga_GAME_speed_level_a1 == 2'b11) ? FpgaPins_Fpga_GAME_clk_pulse4_a1 :
                               (FpgaPins_Fpga_GAME_speed_level_a1 == 2'b10) ? FpgaPins_Fpga_GAME_clk_pulse3_a1 :
                               (FpgaPins_Fpga_GAME_speed_level_a1 == 2'b01) ? FpgaPins_Fpga_GAME_clk_pulse2_a1 :
                               FpgaPins_Fpga_GAME_clk_pulse1_a1; // Default to slowest speed
                        assign FpgaPins_Fpga_GAME_led_output_a1[7:0] = (FpgaPins_Fpga_GAME_win_a2 == 2'b01 )
                                       ? (FpgaPins_Fpga_GAME_clk_pulse1_a2)
                                          ?8'b00001111
                                          :8'b0
                                     :FpgaPins_Fpga_GAME_win_a2 == 2'b10
                                       ? (FpgaPins_Fpga_GAME_clk_pulse1_a2)
                                          ?8'b11110000
                                          : 8'b0
                                    :(FpgaPins_Fpga_GAME_reset_a2 || (FpgaPins_Fpga_GAME_state_a3 == 2'b01 && FpgaPins_Fpga_GAME_state_a4 == 2'b10)  )
                                           ? 8'b00001000 :
               
                                     FpgaPins_Fpga_GAME_state_a3 == 2'b10 ?
                                           FpgaPins_Fpga_GAME_score_a4[7:0]
                                     :(!FpgaPins_Fpga_GAME_clk_pulse_a3 && FpgaPins_Fpga_GAME_clk_pulse_a2) ?
                                         FpgaPins_Fpga_GAME_forward_a2 ? FpgaPins_Fpga_GAME_led_output_a2[7:0] << 1 : FpgaPins_Fpga_GAME_led_output_a2[7:0] >> 1 :
                                         FpgaPins_Fpga_GAME_led_output_a2 ;
                        assign FpgaPins_Fpga_GAME_forward_a1 = FpgaPins_Fpga_GAME_reset_a2 || (FpgaPins_Fpga_GAME_state_a3 == 2'b01 && FpgaPins_Fpga_GAME_state_a4 == 2'b10) ? 1'b1 :  // forward is right to left when == 1'b1
                              (FpgaPins_Fpga_GAME_right_edge_a1  && FpgaPins_Fpga_GAME_led_output_a1 <= 8'd8)
                                 ? 1'b1
                              :  (FpgaPins_Fpga_GAME_left_edge_a1  && FpgaPins_Fpga_GAME_led_output_a1 > 8'd8)
                                 ? 1'b0
                                 //default
                                 : FpgaPins_Fpga_GAME_forward_a2;
                        assign FpgaPins_Fpga_GAME_state_a1[1:0] = FpgaPins_Fpga_GAME_reset_a2 || FpgaPins_Fpga_GAME_win_a1 != 2'b0 ? 2'b01
                                : (FpgaPins_Fpga_GAME_led_output_a2 == 8'b0 && FpgaPins_Fpga_GAME_state_a2 == 2'b01 ) ? //Score display
                                      2'b10
                                : (FpgaPins_Fpga_GAME_state_a2 == 2'b10 && FpgaPins_Fpga_GAME_wait_counter_a2 == 25'd30000000)  ? // Normal gameplay
                                      2'b01
               
                                      : FpgaPins_Fpga_GAME_state_a2[1:0] ;
                        assign FpgaPins_Fpga_GAME_wait_counter_a1[24:0] = FpgaPins_Fpga_GAME_reset_a2 || FpgaPins_Fpga_GAME_state_a2 == 2'b01 ? 25'b0 :
                                     (FpgaPins_Fpga_GAME_state_a2 == 2'b10 && FpgaPins_Fpga_GAME_wait_counter_a2 < 25'd30000000) ? FpgaPins_Fpga_GAME_wait_counter_a2 + 1 :
                                     25'd0;
               
                        assign FpgaPins_Fpga_GAME_score_a1[7:0] = FpgaPins_Fpga_GAME_reset_a2 ? 8'd0 :
                            (FpgaPins_Fpga_GAME_led_output_a3 == 8'h80  && FpgaPins_Fpga_GAME_led_output_a2 == 8'b0)
                               ? FpgaPins_Fpga_GAME_score_a2 == 0
                                  ? 8'b00010000 // Start score setting
                                  : FpgaPins_Fpga_GAME_score_a2 << 1 // Increase score
                            : (FpgaPins_Fpga_GAME_led_output_a3 == 8'h01  && FpgaPins_Fpga_GAME_led_output_a2 == 8'b0)
                               ? FpgaPins_Fpga_GAME_score_a2 == 0
                                  ? 8'b00001000 // Start score setting
                                  : FpgaPins_Fpga_GAME_score_a2 >> 1 // Increase score
               
                                  : FpgaPins_Fpga_GAME_score_a2 ;
               
                        assign FpgaPins_Fpga_GAME_win_a1[1:0] = FpgaPins_Fpga_GAME_reset_a2 ? 2'd0 :
                              (FpgaPins_Fpga_GAME_led_output_a3 == 8'h80  && FpgaPins_Fpga_GAME_led_output_a2 == 8'b0 && FpgaPins_Fpga_GAME_score_a2 == 8'h80)
                                 ? 2'b01
                              : (FpgaPins_Fpga_GAME_led_output_a3 == 8'h01  && FpgaPins_Fpga_GAME_led_output_a2 == 8'b0 && FpgaPins_Fpga_GAME_score_a2 == 8'h01)
                                 ? 2'b10
                                 : FpgaPins_Fpga_GAME_win_a2 ;
               
                        assign FpgaPins_Fpga_GAME_left_btn_a1 = ui_in[3];
                        assign FpgaPins_Fpga_GAME_left_edge_a1 = (!FpgaPins_Fpga_GAME_left_btn_a2 && FpgaPins_Fpga_GAME_left_btn_a1) ;
                        assign FpgaPins_Fpga_GAME_right_btn_a1 = ui_in[1];
                        assign FpgaPins_Fpga_GAME_right_edge_a1 = (!FpgaPins_Fpga_GAME_right_btn_a2 && FpgaPins_Fpga_GAME_right_btn_a1) ;
                        assign FpgaPins_Fpga_GAME_out_a1[7:0] = FpgaPins_Fpga_GAME_led_output_a1 ;
               
               
               
               
                  //_|uart
                     //_@1
               
                        assign FpgaPins_Fpga_UART_pc_a1[3:0] = FpgaPins_Fpga_UART_reset_a1
                                    ? 4'b0:
                                 FpgaPins_Fpga_UART_instr_wr_en_a1
                                    ?FpgaPins_Fpga_UART_pc_a2+1:
                                    FpgaPins_Fpga_UART_pc_a2;
               
                        assign FpgaPins_Fpga_UART_dptr_a1[3:0] = FpgaPins_Fpga_UART_reset_a1
                                    ? 4'b0:
                                 FpgaPins_Fpga_UART_wr_en_a1
                                    ?FpgaPins_Fpga_UART_dptr_a2+1:
                                    FpgaPins_Fpga_UART_dptr_a2;
               
                        assign FpgaPins_Fpga_UART_reset_a1 = !FpgaPins_Fpga_FSM_prog_select_a1 || reset ;
               
                        assign FpgaPins_Fpga_UART_is_hash_a1 = FpgaPins_Fpga_UART_rx_byte_a1 == 8'h23 && FpgaPins_Fpga_UART_rx_done_a1;
                        assign FpgaPins_Fpga_UART_is_enter_a1 = FpgaPins_Fpga_UART_rx_byte_a1 == 8'h20 && FpgaPins_Fpga_UART_rx_done_a1;
                        assign FpgaPins_Fpga_UART_comment_a1 = FpgaPins_Fpga_UART_reset_a1 || FpgaPins_Fpga_UART_is_enter_a2
                                    ? 1'b0:
                                 FpgaPins_Fpga_UART_is_hash_a1 || FpgaPins_Fpga_UART_is_enter_a1
                                    ? 1'b1:
                                    FpgaPins_Fpga_UART_comment_a2;
                        assign FpgaPins_Fpga_UART_valid_rx_done_a1 = FpgaPins_Fpga_UART_rx_done_a1 && !FpgaPins_Fpga_UART_comment_a1;
               
                        assign FpgaPins_Fpga_UART_rx_serial_a1 = ui_in[6];   // pmod connector's TxD port
               
                        assign FpgaPins_Fpga_UART_prog_mem_a1 = ui_in[5];//0 means data 1 means instruction
               
                        /*SV_plus*/
                           uart_rx #(20000000,115200) uart_rx_1(.clk(clk),
                                                           .reset(FpgaPins_Fpga_UART_reset_a1),
                                                           .rx_serial(FpgaPins_Fpga_UART_rx_serial_a1),
                                                           .rx_done(FpgaPins_Fpga_UART_rx_done_a1),
                                                           .rx_byte(FpgaPins_Fpga_UART_rx_byte_a1[7:0])
                                                           );
                        assign FpgaPins_Fpga_UART_first_byte_a1 = FpgaPins_Fpga_UART_reset_a1 ? 1'b1 : FpgaPins_Fpga_UART_first_byte_a2 + FpgaPins_Fpga_UART_valid_rx_done_a1;
                        assign FpgaPins_Fpga_UART_data_a1[7:0] = ((FpgaPins_Fpga_UART_rx_byte_a1 >= 8'h41 && FpgaPins_Fpga_UART_rx_byte_a1 <= 8'h46) || (FpgaPins_Fpga_UART_rx_byte_a1 >= 8'h61 && FpgaPins_Fpga_UART_rx_byte_a1 <= 8'h66))&& FpgaPins_Fpga_UART_valid_rx_done_a1 && FpgaPins_Fpga_UART_first_byte_a2
                                       ? {(FpgaPins_Fpga_UART_rx_byte_a1[3:0] - 4'h7) , 4'b0}:
                                    FpgaPins_Fpga_UART_valid_rx_done_a1 && FpgaPins_Fpga_UART_first_byte_a2
                                       ?{FpgaPins_Fpga_UART_rx_byte_a1[3:0],4'b0}:
                                    ((FpgaPins_Fpga_UART_rx_byte_a1 >= 8'h41 && FpgaPins_Fpga_UART_rx_byte_a1 <= 8'h46) || (FpgaPins_Fpga_UART_rx_byte_a1 >= 8'h61 && FpgaPins_Fpga_UART_rx_byte_a1 <= 8'h66)) && FpgaPins_Fpga_UART_valid_rx_done_a1
                                       ? {FpgaPins_Fpga_UART_data_a2[7:4],(FpgaPins_Fpga_UART_rx_byte_a1[3:0] - 4'h7)}:
                                    FpgaPins_Fpga_UART_valid_rx_done_a1
                                       ?{FpgaPins_Fpga_UART_data_a2[7:4],FpgaPins_Fpga_UART_rx_byte_a1[3:0]}:
                                       FpgaPins_Fpga_UART_data_a2[7:0];
               
                        assign FpgaPins_Fpga_UART_imem_wr_addr_a1[3:0] = FpgaPins_Fpga_UART_pc_a2[3:0];
                        assign FpgaPins_Fpga_UART_instr_wr_en_a1 = FpgaPins_Fpga_UART_valid_rx_done_a1 && !FpgaPins_Fpga_UART_first_byte_a2 && !FpgaPins_Fpga_UART_reset_a1 && FpgaPins_Fpga_UART_prog_mem_a1;
                        assign FpgaPins_Fpga_UART_instr_wr_a1[7:0] = FpgaPins_Fpga_UART_data_a1;
                        assign FpgaPins_Fpga_UART_wr_en_a1 = FpgaPins_Fpga_UART_valid_rx_done_a1 && !FpgaPins_Fpga_UART_first_byte_a2 && !FpgaPins_Fpga_UART_reset_a1 && !FpgaPins_Fpga_UART_prog_mem_a1;
                        assign FpgaPins_Fpga_UART_idata_wr_addr_a1[3:0] = FpgaPins_Fpga_UART_dptr_a2[3:0];
                        assign FpgaPins_Fpga_UART_data_wr_a1[7:0] = FpgaPins_Fpga_UART_data_a1;
                        assign FpgaPins_Fpga_UART_digit_a1[3:0] = ui_in[1] ? FpgaPins_Fpga_UART_data_a1[7:4]:FpgaPins_Fpga_UART_data_a1[3:0];
               
                  //_|lipsi
                     //_@1
               
                        assign FpgaPins_Fpga_LIPSI_reset_a1 = reset || !FpgaPins_Fpga_FSM_lipsi_select_a1;
                        //---------------------MEMORY - INITIALIZATION---------------
               
                        assign FpgaPins_Fpga_LIPSI_instr_a1[7:0] = FpgaPins_Fpga_FSM_instr_a1;
                        assign FpgaPins_Fpga_LIPSI_data_a1[7:0] = FpgaPins_Fpga_FSM_data_a1;
               
                        //-----------------------PC - LOGIC -------------------------
                        assign FpgaPins_Fpga_LIPSI_pc_a1[7:0] = FpgaPins_Fpga_LIPSI_reset_a1 || FpgaPins_Fpga_LIPSI_reset_a2
                                      ? 8'b0:
                                   FpgaPins_Fpga_LIPSI_exit_a2 || FpgaPins_Fpga_LIPSI_is_ld_ind_a2 || FpgaPins_Fpga_LIPSI_is_st_ind_a2
                                      ? FpgaPins_Fpga_LIPSI_pc_a2:
                                   FpgaPins_Fpga_LIPSI_is_br_a3 || (FpgaPins_Fpga_LIPSI_is_brz_a3 && FpgaPins_Fpga_LIPSI_z_a2) || (FpgaPins_Fpga_LIPSI_is_brnz_a3 && !FpgaPins_Fpga_LIPSI_z_a2)
                                      ? FpgaPins_Fpga_LIPSI_instr_a2:
                                   FpgaPins_Fpga_LIPSI_is_brl_a2
                                      ? FpgaPins_Fpga_LIPSI_acc_a2:
                                   FpgaPins_Fpga_LIPSI_is_ret_a2
                                      ? FpgaPins_Fpga_LIPSI_data_a2+1'b1:
                                    FpgaPins_Fpga_LIPSI_pc_a2 + 8'b1;
                        //---------------------DECODE - LOGIC -----------------------
                        assign FpgaPins_Fpga_LIPSI_valid_a1 = (1'b1^FpgaPins_Fpga_LIPSI_is_2cyc_a2) && !FpgaPins_Fpga_LIPSI_reset_a1;
               
                        assign FpgaPins_Fpga_LIPSI_is_ALU_reg_a1 = FpgaPins_Fpga_LIPSI_instr_a1[7] == 0 && FpgaPins_Fpga_LIPSI_valid_a1;
                        assign FpgaPins_Fpga_LIPSI_is_st_a1 = FpgaPins_Fpga_LIPSI_instr_a1[7:4] == 4'b1000 && FpgaPins_Fpga_LIPSI_valid_a1 ;
                        assign FpgaPins_Fpga_LIPSI_is_brl_a1 = FpgaPins_Fpga_LIPSI_instr_a1[7:4] == 4'b1001 && FpgaPins_Fpga_LIPSI_valid_a1 ;
                        assign FpgaPins_Fpga_LIPSI_is_ret_a1 = {FpgaPins_Fpga_LIPSI_instr_a1[7:4], FpgaPins_Fpga_LIPSI_instr_a1[1:0]} == 6'b1101_01 && FpgaPins_Fpga_LIPSI_valid_a1;
                        assign FpgaPins_Fpga_LIPSI_is_ld_ind_a1 = FpgaPins_Fpga_LIPSI_instr_a1[7:4] == 4'b1010 && FpgaPins_Fpga_LIPSI_valid_a1;
                        assign FpgaPins_Fpga_LIPSI_is_st_ind_a1 = FpgaPins_Fpga_LIPSI_instr_a1[7:4] == 4'b1011 && FpgaPins_Fpga_LIPSI_valid_a1;
                        assign FpgaPins_Fpga_LIPSI_is_sh_a1 = FpgaPins_Fpga_LIPSI_instr_a1[7:4] == 4'b1110 && FpgaPins_Fpga_LIPSI_valid_a1;
                        //$is_io = $instr[7:4] == 4'b1111 && $instr[7:0]!=8'b1111_1111 && $valid;
                        assign FpgaPins_Fpga_LIPSI_exit_a1 = FpgaPins_Fpga_LIPSI_instr_a1[7:0] == 8'b1111_1111 && FpgaPins_Fpga_LIPSI_valid_a1;
                        assign FpgaPins_Fpga_LIPSI_is_ALU_imm_a1 = FpgaPins_Fpga_LIPSI_instr_a1[7:4] == 4'b1100 && FpgaPins_Fpga_LIPSI_valid_a1;
                        assign FpgaPins_Fpga_LIPSI_is_br_a1 = {FpgaPins_Fpga_LIPSI_instr_a1[7:4], FpgaPins_Fpga_LIPSI_instr_a1[1:0]} == 6'b1101_00 && FpgaPins_Fpga_LIPSI_valid_a1;
                        assign FpgaPins_Fpga_LIPSI_is_brz_a1 = {FpgaPins_Fpga_LIPSI_instr_a1[7:4], FpgaPins_Fpga_LIPSI_instr_a1[1:0]} == 6'b1101_10 && FpgaPins_Fpga_LIPSI_valid_a1;
                        assign FpgaPins_Fpga_LIPSI_is_brnz_a1 = {FpgaPins_Fpga_LIPSI_instr_a1[7:4], FpgaPins_Fpga_LIPSI_instr_a1[1:0]} == 6'b1101_11 && FpgaPins_Fpga_LIPSI_valid_a1;
                        assign FpgaPins_Fpga_LIPSI_is_2cyc_a1 = (FpgaPins_Fpga_LIPSI_is_ALU_imm_a1 || FpgaPins_Fpga_LIPSI_is_br_a1 || FpgaPins_Fpga_LIPSI_is_ld_ind_a1 || FpgaPins_Fpga_LIPSI_is_st_ind_a1 || FpgaPins_Fpga_LIPSI_is_brz_a1 || FpgaPins_Fpga_LIPSI_is_brnz_a1);
                        //---------------------ALU - OPERATIONS---------------------
                        assign FpgaPins_Fpga_LIPSI_func_a1[2:0] = FpgaPins_Fpga_LIPSI_is_ALU_reg_a1
                                        ? FpgaPins_Fpga_LIPSI_instr_a1[6:4] :
                                     FpgaPins_Fpga_LIPSI_is_ALU_imm_a2
                                        ? FpgaPins_Fpga_LIPSI_instr_a2[2:0] :
                                     3'bxxx;
               
                        assign FpgaPins_Fpga_LIPSI_dptr_a1[7:0] = FpgaPins_Fpga_LIPSI_reset_a1
                                   ? 8'b0:
                                FpgaPins_Fpga_LIPSI_is_ALU_reg_a1 || FpgaPins_Fpga_LIPSI_is_ld_ind_a1 || FpgaPins_Fpga_LIPSI_is_st_a1 || FpgaPins_Fpga_LIPSI_is_st_ind_a1 || FpgaPins_Fpga_LIPSI_is_brl_a1
                                   ? {4'b0,FpgaPins_Fpga_LIPSI_instr_a1[3:0]}:
                                FpgaPins_Fpga_LIPSI_is_brl_a1
                                   ?{6'b1111_11 ,FpgaPins_Fpga_LIPSI_instr_a1[1:0]}:
                                FpgaPins_Fpga_LIPSI_is_ret_a1
                                   ?{6'b1111_11 ,FpgaPins_Fpga_LIPSI_instr_a1[3:2]}:
                                FpgaPins_Fpga_LIPSI_is_ld_ind_a2  || FpgaPins_Fpga_LIPSI_is_st_ind_a2
                                   ? FpgaPins_Fpga_LIPSI_data_a2:
                                   FpgaPins_Fpga_LIPSI_dptr_a2;
               
                        assign FpgaPins_Fpga_LIPSI_rd_en_a1 = FpgaPins_Fpga_LIPSI_is_ALU_reg_a1 || FpgaPins_Fpga_LIPSI_is_ld_ind_a1 || FpgaPins_Fpga_LIPSI_is_ld_ind_a2 || FpgaPins_Fpga_LIPSI_is_st_ind_a1 || FpgaPins_Fpga_LIPSI_is_ret_a1;
                        assign FpgaPins_Fpga_LIPSI_wr_en_a1 = FpgaPins_Fpga_LIPSI_is_st_a1 || FpgaPins_Fpga_LIPSI_is_st_ind_a2 || FpgaPins_Fpga_LIPSI_is_brl_a1;
                        assign FpgaPins_Fpga_LIPSI_op_a1[7:0] = FpgaPins_Fpga_LIPSI_is_ALU_imm_a2
                                      ? FpgaPins_Fpga_LIPSI_instr_a1 :
                                   FpgaPins_Fpga_LIPSI_is_ALU_reg_a1
                                      ? FpgaPins_Fpga_LIPSI_data_a1:
                                   8'bxx;
                        assign FpgaPins_Fpga_LIPSI_is_ALU_a1 = FpgaPins_Fpga_LIPSI_is_ALU_imm_a2 || FpgaPins_Fpga_LIPSI_is_ALU_reg_a1;
               
                        /* verilator lint_off WIDTHEXPAND */
                        assign {FpgaPins_Fpga_LIPSI_c_a1,FpgaPins_Fpga_LIPSI_acc_a1[7:0]} = FpgaPins_Fpga_LIPSI_reset_a1
                                          ? 9'b0:
                                       FpgaPins_Fpga_LIPSI_is_ALU_a1 && FpgaPins_Fpga_LIPSI_func_a1 == 3'b000
                                          ? FpgaPins_Fpga_LIPSI_acc_a2 + FpgaPins_Fpga_LIPSI_op_a1[7:0] :
                                       FpgaPins_Fpga_LIPSI_is_ALU_a1 && FpgaPins_Fpga_LIPSI_func_a1 == 3'b000
                                          ? FpgaPins_Fpga_LIPSI_acc_a2 + FpgaPins_Fpga_LIPSI_op_a1[7:0] :
                                       FpgaPins_Fpga_LIPSI_is_ALU_a1 && FpgaPins_Fpga_LIPSI_func_a1 == 3'b001
                                          ? FpgaPins_Fpga_LIPSI_acc_a2 - FpgaPins_Fpga_LIPSI_op_a1[7:0] :
                                       FpgaPins_Fpga_LIPSI_is_ALU_a1 && FpgaPins_Fpga_LIPSI_func_a1 == 3'b010
                                          ? FpgaPins_Fpga_LIPSI_acc_a2 + FpgaPins_Fpga_LIPSI_op_a1[7:0] + FpgaPins_Fpga_LIPSI_c_a2 :
                                       FpgaPins_Fpga_LIPSI_is_ALU_a1 && FpgaPins_Fpga_LIPSI_func_a1 == 3'b011
                                          ? FpgaPins_Fpga_LIPSI_acc_a2 - FpgaPins_Fpga_LIPSI_op_a1[7:0] - FpgaPins_Fpga_LIPSI_c_a2 :
                                       FpgaPins_Fpga_LIPSI_is_ALU_a1 && FpgaPins_Fpga_LIPSI_func_a1 == 3'b100
                                          ? {FpgaPins_Fpga_LIPSI_c_a2, FpgaPins_Fpga_LIPSI_acc_a2 & FpgaPins_Fpga_LIPSI_op_a1[7:0]} :
                                       FpgaPins_Fpga_LIPSI_is_ALU_a1 && FpgaPins_Fpga_LIPSI_func_a1 == 3'b101
                                          ? {FpgaPins_Fpga_LIPSI_c_a2, FpgaPins_Fpga_LIPSI_acc_a2 | FpgaPins_Fpga_LIPSI_op_a1[7:0]}:
                                       FpgaPins_Fpga_LIPSI_is_ALU_a1 && FpgaPins_Fpga_LIPSI_func_a1 == 3'b110
                                          ? {FpgaPins_Fpga_LIPSI_c_a2, FpgaPins_Fpga_LIPSI_acc_a2 ^ FpgaPins_Fpga_LIPSI_op_a1[7:0]} :
                                       FpgaPins_Fpga_LIPSI_is_ALU_a1 && FpgaPins_Fpga_LIPSI_func_a1 == 3'b111
                                          ? {FpgaPins_Fpga_LIPSI_c_a2, FpgaPins_Fpga_LIPSI_op_a1[7:0]}:
                                       FpgaPins_Fpga_LIPSI_is_sh_a1 && FpgaPins_Fpga_LIPSI_instr_a1[1:0] == 2'b00
                                          ? {FpgaPins_Fpga_LIPSI_acc_a2[7:0],FpgaPins_Fpga_LIPSI_c_a2}:
                                       FpgaPins_Fpga_LIPSI_is_sh_a1 && FpgaPins_Fpga_LIPSI_instr_a1[1:0] == 2'b01
                                          ? {FpgaPins_Fpga_LIPSI_acc_a2[0],FpgaPins_Fpga_LIPSI_c_a2,FpgaPins_Fpga_LIPSI_acc_a2[7:1]}:
                                       FpgaPins_Fpga_LIPSI_is_sh_a1 && FpgaPins_Fpga_LIPSI_instr_a1[1:0] == 2'b10
                                          ? {FpgaPins_Fpga_LIPSI_c_a2,FpgaPins_Fpga_LIPSI_acc_a2[6:0],FpgaPins_Fpga_LIPSI_acc_a2[7]}:
                                       FpgaPins_Fpga_LIPSI_is_sh_a1 && FpgaPins_Fpga_LIPSI_instr_a1[1:0] == 2'b11
                                          ? {FpgaPins_Fpga_LIPSI_c_a2,FpgaPins_Fpga_LIPSI_acc_a2[0],FpgaPins_Fpga_LIPSI_acc_a2[7:1]}:
                                       FpgaPins_Fpga_LIPSI_is_ld_ind_a2
                                          ? {FpgaPins_Fpga_LIPSI_c_a2,FpgaPins_Fpga_LIPSI_data_a1}:
                                        {FpgaPins_Fpga_LIPSI_c_a2,FpgaPins_Fpga_LIPSI_acc_a2[7:0]};
               
                        /* verilator lint_on WIDTHEXPAND */
                        assign FpgaPins_Fpga_LIPSI_z_a1 = FpgaPins_Fpga_LIPSI_acc_a1 == 8'b0;
                        //$data_wr[7:0] = $wr_en? $acc : >>1$data_wr;
                        assign FpgaPins_Fpga_LIPSI_data_wr_a1[7:0] = !FpgaPins_Fpga_LIPSI_wr_en_a1 ? FpgaPins_Fpga_LIPSI_data_wr_a2:
                                        !FpgaPins_Fpga_LIPSI_is_brl_a1 ? FpgaPins_Fpga_LIPSI_acc_a1:
                                        FpgaPins_Fpga_LIPSI_pc_a1;
                        assign FpgaPins_Fpga_LIPSI_digit_a1[3:0] = ui_in[1]? FpgaPins_Fpga_LIPSI_acc_a1[7:4] : FpgaPins_Fpga_LIPSI_acc_a1[3:0];
               
               
               
                     //m5+imem(@1)
               
               
               
                  // Connect Tiny Tapeout outputs. Note that uio_ outputs are not available in the Tiny-Tapeout-3-based FPGA boards.
                  //*uo_out = 8'b0;
                  assign uio_out = 8'b0;
                  assign uio_oe = 8'b0;
               //_\end_source
      
         // LEDs.
         
      
         // 7-Segment
         //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 395   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 346 as: m4+fpga_sseg.
            for (digit = 0; digit <= 0; digit++) begin : L1_Digit //_/digit
               
               for (leds = 0; leds <= 7; leds++) begin : L2_Leds //_/leds

                  // For $viz_lit.
                  logic L2_viz_lit_a0;

                  assign L2_viz_lit_a0 = (! L0_sseg_digit_n_a0[digit]) && ! ((leds == 7) ? L0_sseg_decimal_point_n_a0 : L0_sseg_segment_n_a0[leds % 7]);
                  
               end
            end
         //_\end_source
      
         // slideswitches
         //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv 454   // Instantiated from /raw.githubusercontent.com/osfpga/VirtualFPGALab/a069f1e4e19adc829b53237b3e0b5d6763dc3194/tlvlib/fpgaincludes.tlv, 349 as: m4+fpga_switch.
            for (switch = 0; switch <= 7; switch++) begin : L1_Switch //_/switch

               // For $viz_switch.
               logic L1_viz_switch_a0;

               assign L1_viz_switch_a0 = L0_slideswitch_a0[switch];
               
            end
         //_\end_source
      
         // pushbuttons
         
      //_\end_source
      // Label the switch inputs [0..7] (1..8 on the physical switch panel) (top-to-bottom).
      //_\source /raw.githubusercontent.com/osfpga/VirtualFPGALab/5744600215af09224b7235479be84c30c6e50cb7/tlvlib/tinytapeoutlib.tlv 82   // Instantiated from project.tlv, 1230 as: m5+tt_input_labels_viz(⌈"UNUSED", "UNUSED", "UNUSED", "UNUSED", "UNUSED", "UNUSED", "UNUSED", "UNUSED"⌉)
         for (input_label = 0; input_label <= 7; input_label++) begin : L1_InputLabel //_/input_label
            
         end
      //_\end_source
   //_\end_source

/*SV_plus*/

   // ==========================================
   // If you are using Verilog for your design,
   // your Verilog logic goes here.
   // Note, output assignments are in my_design.
   // ==========================================

//_\SV
endmodule


// Undefine macros defined by SandPiper.
`undef BOGUS_USE
